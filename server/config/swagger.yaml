openapi: 3.0.0
info:
  title: Community Connect API
  description: API documentation for Community Connect
  version: 1.0.0

servers:
  - url: http://localhost:5050

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  # ✅ Authentication Endpoints
  /api/v1/auth/register:
    post:
      summary: Register a new user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name: { type: string }
                email: { type: string }
                password: { type: string }
      responses:
        "201": { description: User registered successfully }
        "400": { description: Bad Request (User already exists) }

  /api/v1/auth/login:
    post:
      summary: Login a user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        "200": { description: User logged in successfully }
        "400": { description: Invalid Credentials }

  /api/v1/auth/me:
    get:
      summary: Get logged-in user details
      tags: [Authentication]
      security:
        - BearerAuth: []
      responses:
        "200": { description: User details returned successfully }
        "401": { description: Unauthorized (Invalid or missing token) }

  # ✅ Events API
  /api/v1/events:
    get:
      summary: Get all events
      tags: [Events]
      responses:
        "200": { description: List of events }
    post:
      summary: Create a new event
      tags: [Events]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, date, location]
              properties:
                title: { type: string }
                date: { type: string, format: date-time }
                location: { type: string }
      responses:
        "201": { description: Event created successfully }

  /api/v1/events/{id}:
    get:
      summary: Get a single event
      tags: [Events]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: Event details }
    put:
      summary: Update an event
      tags: [Events]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                date: { type: string, format: date-time }
                location: { type: string }
      responses:
        "200": { description: Event updated successfully }
    delete:
      summary: Delete an event
      tags: [Events]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: Event deleted successfully }

  # ✅ Resources API
  /api/v1/resources:
    get:
      summary: Get all resources
      tags: [Resources]
      responses:
        "200": { description: List of resources }
    post:
      summary: Create a new resource
      tags: [Resources]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, description, ownerId, availability, location]
              properties:
                title: { type: string }
                description: { type: string }
                ownerId: { type: string }
                availability: { type: string, enum: ["available", "not available"] }
                location: { type: string }
      responses:
        "201": { description: Resource created successfully }

  /api/v1/resources/{id}:
    get:
      summary: Get a single resource
      tags: [Resources]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: Resource details }
    put:
      summary: Update a resource
      tags: [Resources]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                description: { type: string }
                ownerId: { type: string }
                availability: { type: string, enum: ["available", "not available"] }
                location: { type: string }
      responses:
        "200": { description: Resource updated successfully }
    delete:
      summary: Delete a resource
      tags: [Resources]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: Resource deleted successfully }

  # ✅ Skill Sharing API
  /api/v1/skillsharings:
    get:
      summary: Get all skill-sharing listings
      tags: [Skill Sharing]
      responses:
        "200": { description: List of skill-sharing listings }
    post:
      summary: Create a new skill listing
      tags: [Skill Sharing]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [skillName, description, userId, availability, location]
              properties:
                skillName: { type: string }
                description: { type: string }
                userId: { type: string }
                availability: { type: string, enum: ["available", "unavailable"] }
                location: { type: string }
      responses:
        "201": { description: Skill listing created successfully }

  /api/v1/skillsharings/{id}:
    get:
      summary: Get a single skill-sharing listing
      tags: [Skill Sharing]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: Skill-sharing listing details }
    put:
      summary: Update a skill-sharing listing
      tags: [Skill Sharing]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                skillName: { type: string }
                description: { type: string }
                userId: { type: string }
                availability: { type: string, enum: ["available", "unavailable"] }
                location: { type: string }
      responses:
        "200": { description: Skill-sharing listing updated successfully }
    delete:
      summary: Delete a skill-sharing listing
      tags: [Skill Sharing]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: Skill-sharing listing deleted successfully }

  # ✅ Help Requests API
  /api/v1/helprequests:
    get:
      summary: Get all help requests
      tags: [Help Requests]
      responses:
        "200": { description: List of help requests }
    post:
      summary: Create a new help request
      tags: [Help Requests]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, description, category, location]
              properties:
                title: { type: string }
                description: { type: string }
                category: { type: string }
                location: { type: string }
      responses:
        "201": { description: Help request created successfully }

  /api/v1/helprequests/{id}:
    get:
      summary: Get a single help request
      tags: [Help Requests]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: Help request details }
    put:
      summary: Update a help request
      tags: [Help Requests]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                description: { type: string }
                category: { type: string }
                location: { type: string }
      responses:
        "200": { description: Help request updated successfully }
    delete:
      summary: Delete a help request
      tags: [Help Requests]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: Help request deleted successfully }

  # ✅ Messages API
  /api/v1/messages:
    get:
      summary: Get all conversations (Inbox view)
      description: Returns the latest message for each unique conversation the authenticated user has participated in.
      tags: [Messages]
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Inbox retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id: { type: string }
                    senderId: { type: string }
                    receiverId: { type: string }
                    content: { type: string }
                    timestamp: { type: string, format: date-time }
        "401": { description: Unauthorized (Invalid or missing token) }

    post:
      summary: Send a message
      description: Allows a user to send a message to another user.
      tags: [Messages]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [receiverId, content]
              properties:
                receiverId: { type: string }
                content: { type: string }
      responses:
        "201": { description: Message sent successfully }
        "400": { description: Bad Request (Invalid input or missing fields) }
        "401": { description: Unauthorized (User not logged in) }

  /api/v1/messages/{userId1}/{userId2}:
    get:
      summary: Get messages between two users (Chat History)
      description: Retrieves messages exchanged between two users.
      tags: [Messages]
      security:
        - BearerAuth: []
      parameters:
        - name: userId1
          in: path
          required: true
          schema: { type: string }
        - name: userId2
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: List of messages between two users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id: { type: string }
                    senderId: { type: string }
                    receiverId: { type: string }
                    content: { type: string }
                    timestamp: { type: string, format: date-time }
        "401": { description: Unauthorized (Invalid or missing token) }

  /api/v1/messages/{id}:
    delete:
      summary: Delete a message (Soft Delete)
      description: Deletes a message if the **authenticated user is the sender or receiver**.
      tags: [Messages]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: Message deleted successfully }
        "403": { description: Forbidden (Only sender or receiver can delete) }
        "404": { description: Message not found }

  # ✅ Users API
  /api/v1/users:
    get:
      summary: Get all users
      tags: [Users]
      security:
        - BearerAuth: []  
      responses:
        "200": 
          description: List of users
        "401":
          description: Unauthorized (Invalid or missing token)

  /api/v1/users/{id}:
    get:
      summary: Get a single user
      tags: [Users]
      security:
        - BearerAuth: []  
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: User details
        "401":
          description: Unauthorized (Invalid or missing token)

  # ✅ Health Check API
  /api/v1/health:
    get:
      summary: Check API health status
      tags: [Health Check]
      responses:
        "200": { description: API is running and database is connected }
