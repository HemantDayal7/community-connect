openapi: 3.0.0
info:
  title: Community Connect API
  description: API documentation for Community Connect
  version: 1.0.0

servers:
  - url: http://localhost:5050

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  # ✅ Authentication Endpoints
  /auth/register:
    post:
      summary: Register a new user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name: { type: string }
                email: { type: string }
                password: { type: string }
      responses:
        "201": { description: User registered successfully }
        "400": { description: Bad Request (User already exists) }

  /auth/login:
    post:
      summary: Login a user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        "200": { description: User logged in successfully }
        "400": { description: Invalid Credentials }

  /auth/me:
    get:
      summary: Get logged-in user details
      tags: [Authentication]
      security:
        - BearerAuth: []
      responses:
        "200": { description: User details returned successfully }
        "401": { description: Unauthorized (Invalid or missing token) }

  # ✅ Events API
  /events:
    get:
      summary: Get all events
      tags: [Events]
      responses:
        "200": { description: List of events }
    post:
      summary: Create a new event
      tags: [Events]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, date, location]
              properties:
                title: { type: string }
                date: { type: string, format: date-time }
                location: { type: string }
      responses:
        "201": { description: Event created successfully }

  /events/{id}:
    get:
      summary: Get a single event
      tags: [Events]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: Event details }
    put:
      summary: Update an event
      tags: [Events]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                date: { type: string, format: date-time }
                location: { type: string }
      responses:
        "200": { description: Event updated successfully }
    delete:
      summary: Delete an event
      tags: [Events]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: Event deleted successfully }

  # ✅ Resources API
  /resources:
    get:
      summary: Get all resources
      tags: [Resources]
      responses:
        "200": { description: List of resources }
    post:
      summary: Create a new resource
      tags: [Resources]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, description, ownerId, availability, location]
              properties:
                title: { type: string }
                description: { type: string }
                ownerId: { type: string }
                availability: { type: string, enum: [available, borrowed] }
                location: { type: string }
      responses:
        "201": { description: Resource created successfully }

  /resources/{id}:
    get:
      summary: Get a single resource
      tags: [Resources]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: Resource details }
    put:
      summary: Update a resource
      tags: [Resources]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                description: { type: string }
                availability: { type: string, enum: [available, borrowed] }
                location: { type: string }
      responses:
        "200": { description: Resource updated successfully }
    delete:
      summary: Delete a resource
      tags: [Resources]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: Resource deleted successfully }

  # ✅ Help Requests API
  /helprequests:
    get:
      summary: Get all help requests
      tags: [Help Requests]
      responses:
        "200": { description: List of help requests }
    post:
      summary: Create a new help request
      tags: [Help Requests]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [description, category]
              properties:
                description: { type: string }
                category: { type: string }
      responses:
        "201": { description: Help request created successfully }

  # ✅ Messaging API
  /messages:
    get:
      summary: Get all messages
      tags: [Messages]
      security:
        - BearerAuth: []
      responses:
        "200": { description: List of messages }
    post:
      summary: Send a message
      tags: [Messages]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [senderId, receiverId, content]
              properties:
                senderId: { type: string }
                receiverId: { type: string }
                content: { type: string }
      responses:
        "201": { description: Message sent successfully }

